import React, { Component } from "react";
import { withTranslate } from "react-redux-multilingual";
import LazyLoad from "react-lazyload";

import Thought from "../icons/toughtBalloon";
import Speech from "../icons/speechBaloon";
import SpeechRight from "../icons/speechBaloonRight";
import { TimelineLite } from "gsap/all";
import Hugger from "../icons/Hugger";

class Story extends Component {
  constructor(props) {
    super(props);

    this.logoTl = new TimelineLite({ paused: false });
    this.speech = null;
    this.speechRight = null;
    this.thought = null;
    this.parraf0 = null;
    this.parrafR0 = null;
    this.parraf1 = null;
    this.parrafR1 = null;
    this.parraf2 = null;
    this.parrafR2 = null;
    this.parraf3 = null;
    this.parrafR3 = null;
    this.parraf4 = null;
    this.parrafR4 = null;
    this.parraf5 = null;
    this.parrafR5 = null;
    this.armUp = null;
    this.armDown = null;
    this.mouthOpen = null;
    this.mouthClose = null;
    this.eyeLeft = null;
    this.eyeRight = null;
    this.eyeLeftClose = null;
    this.eyeRightClose = null;
    this.background = null;
    this.backgroundColor = null;

    this.parraf = [
      "Hi ! My name is Pon and I'm a felt artist from Taiwan..",
      "inspired by nature, embracing simplicity, exploring beauty...",
      "I'm good interpeting characters with fresh and minimal style ..",
      "Trough diverse complexity works, I explore people's thinking ..",
      "then observe, study and explore differente facades of the world.",
    ];
    this.parrafR = [
      "I've chosen wool as material to create my sculptures..",
      "always searching and learning new things to fuse into my work.",
      "to accentuate their key features and transmit their essence.",
      "and let a door open to start possible dialogues with the public..",
      "Please join one of my free online workshop and start poking felt !",
    ];
  }

  // add instances to the timeline
  componentDidMount() {
    this.logoTl

      //0 s  LeftSpeech
      .set(this.eyeLeft, { visibility: "visible" })
      .set(this.eyeRight, { visibility: "visible" })

      .set(this.armUp, { visibility: "visible" })
      .to(this.speech, 4, { visibility: "visible", left: -150 })
      .to(this.speechRight, 4, { visibility: "hidden", right: -150 }, "-=4")
      .to(this.parraf0, 4, { display: "block" }, "-=8")

      //4 s  RightSpeech
      .to(this.speech, 4, { visibility: "hidden", left: -150 })
      .set(this.parraf0, { display: "none" })
      .to(this.speechRight, 4, { visibility: "visible", right: -200 }, "-=4")
      .to(this.parrafR0, 4, { display: "block" }, "-=8")

      //8 s  LeftSpeech

      .set(this.eyeLeft, { visibility: "hidden" })
      .set(this.eyeRight, { visibility: "hidden" })
      .set(this.eyeLeftClose, { visibility: "visible" })
      .set(this.eyeRightClose, { visibility: "visible" })
      .to(this.speech, 4, { visibility: "visible", left: -200 })
      .set(this.parrafR0, { display: "none" })
      .to(this.speechRight, 4, { visibility: "hidden", right: -150 }, "-=4")
      .to(this.parraf1, 4, { display: "block" }, "-=8")
      .set(this.eyeLeft, { visibility: "visible" })
      .set(this.eyeRight, { visibility: "visible" })
      .set(this.eyeLeftClose, { visibility: "hidden" })
      .set(this.eyeRightClose, { visibility: "hidden" })
      //12 s  RightSpeech
      .to(this.speech, 4, { visibility: "hidden", left: -150 })
      .set(this.parraf1, { display: "none" })
      .to(this.speechRight, 4, { visibility: "visible", right: -200 }, "-=4")
      .to(this.parrafR1, 4, { display: "block" }, "-=8")

      //16 s  LeftSpeech
      .to(this.speech, 4, { visibility: "visible", left: -200 })
      .set(this.parrafR1, { display: "none" })
      .to(this.speechRight, 4, { visibility: "hidden", right: -150 }, "-=4")
      .to(this.parraf2, 4, { display: "block" }, "-=8")

      //20 s  RightSpeech
      .to(this.speech, 4, { visibility: "hidden", left: -150 })
      .set(this.parraf2, { display: "none" })
      .to(this.speechRight, 4, { visibility: "visible", right: -200 }, "-=4")
      .to(this.parrafR2, 4, { display: "block" }, "-=8")

      //24 s  LeftSpeech
      .set(this.eyeLeft, { visibility: "hidden" })
      .set(this.eyeRight, { visibility: "hidden" })
      .set(this.eyeLeftClose, { visibility: "visible" })
      .set(this.eyeRightClose, { visibility: "visible" })
      .to(this.speech, 4, { visibility: "visible", left: -200 })
      .set(this.parrafR2, { display: "none" })
      .to(this.speechRight, 4, { visibility: "hidden", right: -150 }, "-=4")
      .to(this.parraf3, 4, { display: "block" }, "-=8")
      .set(this.eyeLeft, { visibility: "visible" })
      .set(this.eyeRight, { visibility: "visible" })
      .set(this.eyeLeftClose, { visibility: "hidden" })
      .set(this.eyeRightClose, { visibility: "hidden" })

      //28 s  RightSpeech
      .to(this.speech, 4, { visibility: "hidden", left: -150 })
      .set(this.parraf3, { display: "none" })
      .to(this.speechRight, 4, { visibility: "visible", right: -200 }, "-=4")
      .to(this.parrafR3, 4, { display: "block" }, "-=8")

      //32 s  LeftSpeech
      .to(this.speech, 4, { visibility: "visible", left: -200 })
      .set(this.parrafR3, { display: "none" })
      .to(this.speechRight, 4, { visibility: "hidden", right: -150 }, "-=4")
      .to(this.parraf4, 4, { display: "block" }, "-=8")

      //36 s  RightSpeech
      .to(this.speech, 4, { visibility: "hidden", left: -150 })
      .set(this.parraf4, { display: "none" })
      .to(this.speechRight, 4, { visibility: "visible", right: -200 }, "-=4")
      .to(this.parrafR4, 4, { display: "block" }, "-=8")
      .set(this.armUp, { visibility: "hidden" })
      .set(this.armDown, { visibility: "visible" })

      //40 s  LeftSpeech --- End of text --- Clean screen
      .to(this.speech, 4, { visibility: "hidden", left: -200 })
      .to(this.thought, { visibility: "visible" })
      .set(this.armUp, { visibility: "hidden" })
      .set(this.armDown, { visibility: "visible" })
      .set(this.eyeLeft, { visibility: "hidden" })
      .set(this.eyeRight, { visibility: "hidden" })
      .set(this.eyeLeftClose, { visibility: "visible" })
      .set(this.eyeRightClose, { visibility: "visible" })
      .set(this.mouthOpen, { visibility: "hidden" })
      .set(this.mouthClose, { visibility: "visible" })
      .set(this.parrafR4, { display: "none" })
      .set(this.background, { display: "block", opacity: 0 })
      .set(this.backgroundColor, { backgroundColor: " #dbb59d ", opacity: 0 })
      .to(this.speechRight, 4, { visibility: "hidden", right: -150 }, "-=4")
      .to(this.backgroundColor, 4, {
        backgroundColor: " #dbb59d ",

        opacity: 1,
        ease: "back.out(1.7)",
      })
      .to(
        this.background,
        4,
        {
          display: "block",
          opacity: 1,
          ease: "back.out(1.7)",
        },
        "-=4"
      );
  }

  render() {
    return (
      <section
        className="l-story "
        ref={(section) => (this.backgroundColor = section)}
      >
        <LazyLoad>
          <img
            src={process.env.PUBLIC_URL + "assets/img/pattern.png"}
            className="section__pattern"
            ref={(img) => (this.background = img)}
          />
        </LazyLoad>
        <h1>Story</h1>

        <div className="l-story__main">
          <div className="l-story__main--banner">
            <div className="pon-canvas">
              <div className="speech" ref={(div) => (this.speech = div)}>
                <Speech />
                <p
                  className={`s1 text-balloon  speech-place`}
                  ref={(p) => (this.parraf0 = p)}
                >
                  {" "}
                  {this.parraf[0]}
                </p>

                <p
                  className={`s1 text-balloon  speech-place`}
                  ref={(p) => (this.parraf1 = p)}
                >
                  {" "}
                  {this.parraf[1]}
                </p>

                <p
                  className={`s1 text-balloon  speech-place`}
                  ref={(p) => (this.parraf2 = p)}
                >
                  {" "}
                  {this.parraf[2]}
                </p>

                <p
                  className={`s1 text-balloon  speech-place`}
                  ref={(p) => (this.parraf3 = p)}
                >
                  {" "}
                  {this.parraf[3]}
                </p>

                <p
                  className={`s1 text-balloon  speech-place`}
                  ref={(p) => (this.parraf4 = p)}
                >
                  {" "}
                  {this.parraf[4]}
                </p>
              </div>

              <div
                className="speech-right"
                ref={(div) => (this.speechRight = div)}
              >
                <SpeechRight />
                <p
                  className={` s1-right text-balloon-right  speech-place `}
                  ref={(p) => (this.parrafR0 = p)}
                >
                  {this.parrafR[0]}
                </p>

                <p
                  className={` s1-right text-balloon-right  speech-place `}
                  ref={(p) => (this.parrafR1 = p)}
                >
                  {this.parrafR[1]}
                </p>

                <p
                  className={` s1-right text-balloon-right  speech-place `}
                  ref={(p) => (this.parrafR2 = p)}
                >
                  {this.parrafR[2]}
                </p>

                <p
                  className={` s1-right text-balloon-right  speech-place `}
                  ref={(p) => (this.parrafR3 = p)}
                >
                  {this.parrafR[3]}
                </p>

                <p
                  className={` s1-right text-balloon-right  speech-place `}
                  ref={(p) => (this.parrafR4 = p)}
                >
                  {this.parrafR[4]}
                </p>
              </div>

              <div id="thought-canvas" ref={(div) => (this.thought = div)}>
                <Thought />
                <Hugger />
              </div>

              <svg
                id="pon-svg"
                width="105"
                height="128"
                viewBox="0 0 105 128"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <g id="ponLast 1">
                  <path
                    id="hair-corner"
                    d="M75.5957 43.9828C75.1763 43.5194 75.1593 43.3254 75.4478 42.2951C75.9067 40.656 75.9889 36.6348 75.5706 36.2877C75.3389 36.0953 74.7567 36.213 73.5851 36.6891C71.5915 37.4991 71.5871 37.4994 71.4126 36.8323C71.3111 36.444 71.4294 36.2631 71.8545 36.1564C72.1737 36.0762 72.5497 35.7498 72.6899 35.431C72.9761 34.7804 73.8193 34.3275 75.194 34.0863C76.0316 33.9393 76.1964 34.0188 76.9138 34.9156C77.9146 36.898 78.38 41.3604 77.535 43.7788C77.1865 44.6569 76.291 44.7511 75.5957 43.9828Z"
                    fill="#d28e77"
                  />

                  <path
                    id="ear"
                    d="M80.7295 50.8181C80.4867 50.3644 80.5538 50.1525 81.1308 49.5502C82.0706 48.5693 82.5756 45.7372 81.9367 45.0312C80.6017 44.3193 78.7914 45.7069 78.7656 47.0586C78.7656 47.6422 78.6292 47.833 78.1648 47.8989C77.6023 47.9788 77.5731 47.9118 77.7066 46.849C77.5836 46.063 78.3569 45.4278 78.3688 44.7454C78.3688 44.1401 79.998 42.7453 80.949 42.5364C81.9113 42.325 82.9691 42.7166 83.7698 43.5806C84.3374 44.193 84.3774 44.4191 84.2587 46.3396C84.0951 48.9851 83.1894 51.7565 82.4592 51.8459C81.695 51.8701 81.0806 51.4534 80.7295 50.8181Z"
                    fill="#d28e77"
                  />

                  <path
                    id="hair-front"
                    d="M35.3285 40.259C34.4876 39.4046 35.9606 38.6124 39.273 38.1375C43.3548 37.1151 46.1286 37.002 50.0583 36.5854C52.4266 35.9902 67.2739 35.8394 67.2563 34.4893C67.2563 33.9105 67.8511 32.6049 68.1162 32.6022C68.2253 32.6011 68.3146 32.362 68.3146 32.071C68.3146 31.2819 69.7761 31.3334 70.1904 32.1371C70.3593 32.4645 70.7281 32.9862 71.0102 33.2964C71.4909 33.8251 71.4973 33.9216 71.1129 34.8416C70.8874 35.3812 70.4883 35.8789 70.2259 35.9475C69.9636 36.0161 69.6346 36.323 69.4948 36.6295C69.2531 37.1593 69.0264 37.1898 64.875 37.2491C56.8252 37.6447 47.1161 38.0493 40.4011 39.7785C37.7875 40.4934 35.7493 40.6864 35.3285 40.259Z"
                    fill="#d28e77"
                  />
                  <path
                    id="face"
                    d="M50.3229 84.4509C48.0641 84.2508 46.9778 84.0247 46.4865 83.6523C43.7436 83.0013 41.7711 81.5466 39.2135 80.596C35.1351 78.7507 33.2559 76.3907 31.1876 73.5267C28.6588 67.616 27.691 63.6357 27.8995 52.8187C28.0086 52.7096 28.0997 51.6578 28.1018 50.4815C28.1076 47.2155 28.9372 45.3302 30.378 45.3085C30.8603 45.3013 30.9304 45.4382 30.8822 46.2923C29.809 53.3616 29.7851 61.2273 31.2676 67.5251C31.5739 68.762 31.8602 69.9527 31.9038 70.1709C32.7217 72.288 34.3889 74.0242 35.7534 75.5949C37.1891 77.2672 38.3052 78.0276 40.6232 78.9128C46.7955 81.8361 51.1675 82.6132 58.2674 81.8004C61.1882 81.4398 64.7747 80.4181 67.2563 79.2397C68.3477 78.7214 69.5349 78.1656 69.8945 78.0045C70.9113 77.5489 73.0785 76.0659 74.5062 74.8485C80.1439 70.9862 82.6777 65.1301 83.2196 59.1745C83.3349 57.8324 83.9465 57.2195 84.8315 57.5591C85.3646 57.7637 86.0081 59.345 85.7647 59.8522C85.3832 60.6473 85.031 61.6174 84.3241 63.8209C83.5041 66.3767 82.9799 67.6416 81.6104 70.3684C80.7323 73.4536 74.8681 76.8429 73.7837 79.1141C73.5056 79.4499 67.5969 81.8717 66.4625 82.2106C61.2676 84.0041 55.739 84.8931 50.3229 84.4509Z"
                    fill="#d28e77"
                  />
                  <path
                    id="body"
                    d="M30.0578 113.008C31.0093 108.574 32.2841 103.13 33.3539 99.6675C34.8232 95.7573 35.9729 88.9425 37.9586 86.5137C38.375 86.0357 38.9138 85.2577 39.156 84.7847C41.7061 81.9444 39.9935 86.9091 39.7432 87.3907C38.7041 89.3504 37.4706 92.5692 36.8128 95.0373C36.5607 95.9832 36.2365 97.0545 36.0924 97.418C35.5478 98.7911 33.2753 107.656 32.6931 110.679C32.3725 112.344 32.4648 113.469 32.9002 113.206C33.0104 113.139 34.2316 113.006 35.6141 112.909C38.0474 112.739 41.4161 112.124 42.2286 111.701C42.6803 111.465 43.775 111.237 46.0651 110.901C48.0919 110.603 54.2471 109.527 57.8391 108.842C59.367 108.551 62.165 108.118 64.0568 107.88C65.9485 107.642 67.9726 107.333 68.5547 107.192C70.0926 106.821 72.8193 106.442 76.9544 106.024C81.6917 105.546 81.6711 105.553 81.3654 104.487C80.9157 102.919 81.2351 102.516 82.2205 103.408C83.1544 104.253 83.16 103.033 82.2411 98.8534C80.4821 92.1759 77.2336 86.0846 76.9897 85.6519C73.3766 80.8382 70.6069 80.1952 71.0682 79.4494C71.6519 78.8223 72.6896 77.0537 73.3354 76.988C73.5499 76.9698 73.7795 76.8209 73.9614 76.8116C75.1994 76.748 83.7039 84.0367 84.5316 85.7769C84.7738 86.2862 85.2667 87.1792 85.6269 87.7613C86.3953 89.003 86.9812 90.1693 87.7537 91.9946C88.3563 93.4184 88.4525 93.7421 88.8153 95.5665C88.9455 96.2213 89.2374 97.531 89.4638 98.4769C89.6903 99.4228 90.1861 101.656 90.5656 103.439L91.2558 106.681L89.7445 107.611C88.7774 107.891 88.7323 106.444 88.6627 105.313C88.2472 101.355 86.7983 97.3378 86.0153 93.979C85.841 93.1529 84.0302 89.1869 83.1646 87.7354C81.7781 85.4106 76.0431 78.6138 73.7837 79.1141C77.4094 82.0327 79.7192 86.578 80.2101 87.3734C80.7393 88.717 81.7835 89.8745 82.1608 91.1316C82.3424 91.7518 82.64 92.4973 82.8221 92.7884C83.0041 93.0794 83.3453 94.0914 83.5802 95.0373C84.3996 97.2336 85.1639 104.631 86.4124 105.578C87.258 106.203 90.231 105.895 89.7445 107.611C89.4363 107.982 86.4155 108.266 84.1651 107.877C82.0473 107.511 74.0462 108.298 68.1578 109.451C67.0664 109.665 64.9828 109.975 63.5276 110.14C60.2065 110.518 60.1967 110.519 59.5589 110.726C59.2678 110.82 58.0772 111.071 56.913 111.283C55.7489 111.496 54.4987 111.732 54.1349 111.808C53.0875 112.026 47.27 112.961 45.6682 113.169C44.8679 113.273 43.6177 113.597 42.8901 113.89C42.1625 114.183 41.21 114.458 40.7734 114.499C39.4508 114.627 36.7332 115.39 35.5443 115.967C30.5724 116.759 29.8185 115.815 30.0578 113.008Z"
                    fill="#d28e77"
                  />

                  <g id="hair">
                    <mask id="path-14-inside-1" fill="white">
                      <path d="M20.6172 75.7933C20.143 75.2693 19.0381 72.8168 19.2762 72.8168C19.3616 72.8168 19.3116 72.6679 19.165 72.486C15.1181 55.3218 18.1269 30.4853 25.7877 17.1448C29.1895 13.7468 32.5681 9.64137 36.7622 7.41844C38.6835 6.40724 38.7468 6.33661 39.4467 4.42198C40.129 2.5553 41.6366 0.385146 42.4636 0.079222C42.7984 -0.0446639 43.3005 -0.0210544 43.6422 0.134645C44.3103 0.43904 44.3902 1.13803 43.9507 2.83448C43.369 5.08005 43.3668 5.07261 44.468 4.54055C45.0012 4.28292 45.9117 3.98966 46.4912 3.88886C53.5016 2.10101 61.3469 1.52395 66.9917 1.52753C75.0022 1.02894 79.1984 2.77904 85.9282 6.21657C86.6638 6.58929 87.4215 7.08211 87.6121 7.31174C87.8026 7.54138 88.063 7.72927 88.1907 7.72927C88.5345 7.72927 89.0809 8.23725 93.8821 13.0209C99.0818 17.2166 100.041 20.4965 102.447 25.3241C103.081 26.1415 103.536 30.1677 103.658 36.0397C103.729 39.4594 103.905 42.9988 104.049 43.905C104.193 44.8112 104.249 46.4781 104.173 47.6092C104.098 48.7403 103.982 51.035 103.916 52.7084C103.783 56.0751 103.439 57.8132 102.037 62.1995C101.317 64.4501 100.884 65.3648 100.23 66.0195C99.3926 66.8565 99.2747 66.889 95.9464 67.2C94.0641 67.3758 92.2512 67.5956 91.9179 67.6884C91.3516 67.846 91.3429 67.8783 91.7856 68.1808C92.0462 68.3588 92.5943 68.5859 93.0037 68.6855C93.6233 68.8361 93.7341 68.9868 93.6651 69.5848C93.5597 70.4991 92.8353 70.6255 90.8303 70.0792C90.0156 69.8572 88.5155 69.5942 87.4969 69.4948C85.2191 69.2726 80.8624 68.6211 80.8624 67.9745C80.8624 67.2875 82.6843 66.3027 87.8938 66.7381C93.2919 66.6733 96.9388 65.5941 99.7352 62.2334C100.112 61.8545 100.211 60.808 100.436 60.1976C100.661 59.5872 100.91 58.6942 100.99 58.2132C101.069 57.7322 101.242 56.7433 101.374 56.0157C101.927 52.9792 102.081 47.575 101.773 41.9928C101.619 39.1904 101.627 37.8819 101.8 37.6021C101.869 37.4905 101.811 37.3288 101.672 37.2428C101.533 37.1567 101.411 35.5114 101.4 33.5865C101.454 30.7645 100.326 23.6576 98.5959 22.0055C98.385 21.8306 98.2125 21.4678 98.2125 21.1994C98.2125 20.279 90.6091 12.1247 87.7547 9.98403C83.9671 7.29199 79.6773 4.59826 75.4584 3.85714C66.312 -0.11761 56.2742 6.04895 47.709 5.54224C47.4412 5.52208 46.3263 5.96651 45.2314 6.52988L43.2407 7.55417L42.2839 7.10014C41.7577 6.85042 41.5 6.70287 41.5 6.5C41.5 5.88775 40.786 5.52778 40.4083 6.04425C40.1113 6.45048 40.1141 6.64527 40.4259 7.24823C40.6305 7.64387 40.7979 8.09255 40.7979 8.24529C40.7979 8.71827 40.0514 8.55159 39.495 7.95439C39.495 7.95439 39.2901 8.31796 39 8.22869C38.5113 8.0783 37.9634 8.22869 37.9634 8.22869C35.2167 11.454 29.0431 13.7529 27.5688 17.8623C27.5688 17.9838 27.2725 18.4718 26.9103 18.9465C21.7442 31.2322 16.9817 50.5666 19.7481 64.747C20.0045 65.989 21.1096 73.8511 22.211 73.8706C22.8984 73.8638 28.8784 71.5522 30.0601 71.0409C32.1389 70.1413 33.9393 72.1403 31.8113 72.7628C30.0755 73.2705 26.2925 74.9972 25.849 75.0721C25.7035 75.0967 25.3463 75.2063 25.0552 75.3156C23.7899 75.7614 21.5814 76.7801 20.6172 75.7933Z" />
                    </mask>
                    <path
                      d="M20.6172 75.7933C20.143 75.2693 19.0381 72.8168 19.2762 72.8168C19.3616 72.8168 19.3116 72.6679 19.165 72.486C15.1181 55.3218 18.1269 30.4853 25.7877 17.1448C29.1895 13.7468 32.5681 9.64137 36.7622 7.41844C38.6835 6.40724 38.7468 6.33661 39.4467 4.42198C40.129 2.5553 41.6366 0.385146 42.4636 0.079222C42.7984 -0.0446639 43.3005 -0.0210544 43.6422 0.134645C44.3103 0.43904 44.3902 1.13803 43.9507 2.83448C43.369 5.08005 43.3668 5.07261 44.468 4.54055C45.0012 4.28292 45.9117 3.98966 46.4912 3.88886C53.5016 2.10101 61.3469 1.52395 66.9917 1.52753C75.0022 1.02894 79.1984 2.77904 85.9282 6.21657C86.6638 6.58929 87.4215 7.08211 87.6121 7.31174C87.8026 7.54138 88.063 7.72927 88.1907 7.72927C88.5345 7.72927 89.0809 8.23725 93.8821 13.0209C99.0818 17.2166 100.041 20.4965 102.447 25.3241C103.081 26.1415 103.536 30.1677 103.658 36.0397C103.729 39.4594 103.905 42.9988 104.049 43.905C104.193 44.8112 104.249 46.4781 104.173 47.6092C104.098 48.7403 103.982 51.035 103.916 52.7084C103.783 56.0751 103.439 57.8132 102.037 62.1995C101.317 64.4501 100.884 65.3648 100.23 66.0195C99.3926 66.8565 99.2747 66.889 95.9464 67.2C94.0641 67.3758 92.2512 67.5956 91.9179 67.6884C91.3516 67.846 91.3429 67.8783 91.7856 68.1808C92.0462 68.3588 92.5943 68.5859 93.0037 68.6855C93.6233 68.8361 93.7341 68.9868 93.6651 69.5848C93.5597 70.4991 92.8353 70.6255 90.8303 70.0792C90.0156 69.8572 88.5155 69.5942 87.4969 69.4948C85.2191 69.2726 80.8624 68.6211 80.8624 67.9745C80.8624 67.2875 82.6843 66.3027 87.8938 66.7381C93.2919 66.6733 96.9388 65.5941 99.7352 62.2334C100.112 61.8545 100.211 60.808 100.436 60.1976C100.661 59.5872 100.91 58.6942 100.99 58.2132C101.069 57.7322 101.242 56.7433 101.374 56.0157C101.927 52.9792 102.081 47.575 101.773 41.9928C101.619 39.1904 101.627 37.8819 101.8 37.6021C101.869 37.4905 101.811 37.3288 101.672 37.2428C101.533 37.1567 101.411 35.5114 101.4 33.5865C101.454 30.7645 100.326 23.6576 98.5959 22.0055C98.385 21.8306 98.2125 21.4678 98.2125 21.1994C98.2125 20.279 90.6091 12.1247 87.7547 9.98403C83.9671 7.29199 79.6773 4.59826 75.4584 3.85714C66.312 -0.11761 56.2742 6.04895 47.709 5.54224C47.4412 5.52208 46.3263 5.96651 45.2314 6.52988L43.2407 7.55417L42.2839 7.10014C41.7577 6.85042 41.5 6.70287 41.5 6.5C41.5 5.88775 40.786 5.52778 40.4083 6.04425C40.1113 6.45048 40.1141 6.64527 40.4259 7.24823C40.6305 7.64387 40.7979 8.09255 40.7979 8.24529C40.7979 8.71827 40.0514 8.55159 39.495 7.95439C39.495 7.95439 39.2901 8.31796 39 8.22869C38.5113 8.0783 37.9634 8.22869 37.9634 8.22869C35.2167 11.454 29.0431 13.7529 27.5688 17.8623C27.5688 17.9838 27.2725 18.4718 26.9103 18.9465C21.7442 31.2322 16.9817 50.5666 19.7481 64.747C20.0045 65.989 21.1096 73.8511 22.211 73.8706C22.8984 73.8638 28.8784 71.5522 30.0601 71.0409C32.1389 70.1413 33.9393 72.1403 31.8113 72.7628C30.0755 73.2705 26.2925 74.9972 25.849 75.0721C25.7035 75.0967 25.3463 75.2063 25.0552 75.3156C23.7899 75.7614 21.5814 76.7801 20.6172 75.7933Z"
                      fill="#d28e77"
                      stroke-width="2"
                      mask="url(#path-14-inside-1)"
                    />
                  </g>
                  <path
                    id="nose"
                    d="M50.656 56.4864C49.9432 56.3542 49.2646 55.4581 49.2646 54.6491C49.2646 53.7557 50.2541 52.2701 51.0601 51.9535C51.455 51.7984 52.1339 51.6369 52.5688 51.5947C53.2621 51.5273 53.3839 51.3876 53.5587 50.4595C53.6683 49.8774 53.762 47.6861 53.7669 45.5899C53.7753 42.0377 53.8141 41.7455 54.3388 41.2904C55.0292 40.6917 55.5063 40.6676 55.7186 41.2207C55.9735 41.885 55.9012 46.4775 55.5836 49.798C55.4235 51.4715 55.2757 53.2575 55.2551 53.7668C55.2019 55.0809 54.9009 55.4364 53.995 55.2553C53.3751 55.1313 53.2333 55.1942 53.2333 55.5931C53.2333 56.462 52.2889 56.7893 50.656 56.4864Z"
                    fill="#d28e77"
                  />
                  <g id="arm-up" ref={(g) => (this.armUp = g)}>
                    <path
                      id="path4738 3 6"
                      d="M33.8114 91.4007C17.6237 99.0732 8.46847 88.6979 7.74304 84.9629C7.60395 84.3908 7.15308 82.6521 6.74063 81.0991C5.98137 78.2212 5.43114 76.2668 4.79449 73.188C4.34669 72.2285 2.84521 63.6015 4.58392 63.0925C6.32262 62.5835 10.1611 63.789 12.1222 65.0622C13.6985 65.9372 14.6777 67.9922 15.6849 69.586C15.5661 70.0493 15.6109 70.9802 15.8379 72.1472C16.4988 75.5429 18.4775 78.3684 21.423 81.0997C25.5425 84.2075 37.3185 82.2374 39.156 84.7848C39.215 88.7438 33.8114 91.4007 33.8114 91.4007C33.8114 91.4007 33.8923 87.8991 33.8513 87.325C35.5202 84.5038 23.1358 84.3028 19.0656 81.9165C13.7221 76.6893 13.9265 74.512 12.8465 69.5315C12.8465 68.8118 12.6275 68.642 10.7807 67.9281C8.25298 66.951 7.27965 66.9114 6.81684 67.7673C6.31061 68.7035 7.12848 72.1669 9.10083 80.2075C9.3615 81.27 9.40073 82.3772 9.55482 83.0311C12.5183 91.2371 26.367 96.0683 33.8513 87.325C35.5315 87.5825 33.8114 91.4007 33.8114 91.4007Z"
                      fill="#d28e77"
                      stroke="#d28e77"
                      stroke-width="0.2"
                    />
                    <path
                      id="path965 7"
                      d="M4.12431 63.9117C1.52299 61.7575 1.8946 60.6017 1.52299 58.4475C1.15137 56.2933 2.74402 52.3527 2.74402 52.3527C2.74402 52.3527 4.6021 51.6696 4.54901 53.2984C4.49589 54.9272 3.74619 57.2637 5.50457 57.1865C7.48472 57.0995 5.55768 53.9289 6.51324 52.5629C7.46882 51.1968 8.37131 52.6154 8.68984 53.0358C9.00837 53.4561 9.06147 55.7154 9.32691 56.0306C9.59235 56.3459 10.8665 52.3527 12.8838 53.2459C14.9012 54.1391 15.2197 56.3459 14.211 58.2373C13.2023 60.1288 14.5295 61.8101 15.1135 61.3898C15.6975 60.9695 18.7766 59.4983 18.8827 61.5474C18.5111 62.3881 17.8332 63.5503 16.9716 64.0694C15.7505 64.805 13.2554 66.0134 12.8307 65.9083C12.406 65.8033 4.12431 63.9117 4.12431 63.9117V63.9117Z"
                      stroke="#d28e77"
                      fill="#ffeee3"
                      stroke-width="2"
                    />
                  </g>

                  <g id="arm-down" ref={(g) => (this.armDown = g)}>
                    <path
                      id="path4738 3"
                      d="M36.3655 77.6384C34.7516 77.445 31.7831 81.3477 30.8103 82.5787C29.9529 83.726 28.2024 86.5933 27.4973 88.4843C27.0948 89.5637 26.6008 90.8637 26.3997 91.373C26.0759 92.1931 25.8314 93.1007 24.974 96.6646C24.8514 97.174 24.4542 98.7218 24.0908 100.104C23.4219 102.666 22.8709 105.332 22.31 108.073C21.9155 108.927 20.6588 115.681 22.1907 116.134C23.7225 116.587 27.1044 115.514 28.8321 114.38C30.2209 113.601 31.0836 111.772 31.9709 110.353C31.8663 109.941 31.9057 109.112 32.1058 108.073C32.6881 105.05 34.9605 96.1851 35.5051 94.812C35.6493 94.4485 35.9734 93.3772 36.2255 92.4313C36.8833 89.9631 38.117 86.7444 39.156 84.7847C39.2079 81.2604 36.3655 77.6384 36.3655 77.6384C36.3655 77.6384 35.9075 80.954 35.8715 81.465C37.3418 83.9765 34.2361 93.1513 32.7668 97.0615C31.697 100.524 30.4218 105.968 29.4703 110.402C29.4703 111.042 29.2774 111.194 27.6503 111.829C25.4233 112.699 24.5657 112.734 24.158 111.972C23.712 111.139 24.1677 108.32 25.9057 101.163C26.1353 100.217 26.4345 98.9665 26.5702 98.3844C26.706 97.8023 26.93 96.9094 27.0679 96.4C27.2058 95.8907 27.5115 94.7596 27.7474 93.8865C28.2486 92.032 29.4699 88.7067 29.783 88.3437C29.9021 88.2054 29.9995 87.8781 29.9995 87.6166C29.9995 87.3551 30.4292 86.6658 30.9545 86.0844C34.4739 81.2089 35.8715 81.465 35.8715 81.465C37.0872 81.0374 36.3655 77.6384 36.3655 77.6384Z"
                      fill="#d28e77"
                    />
                    <path
                      id="hand-down"
                      d="M21.7857 115.404C19.4939 117.322 19.8213 118.351 19.4939 120.269C19.1665 122.186 20.5697 125.694 20.5697 125.694C20.5697 125.694 22.2067 126.302 22.1599 124.852C22.1131 123.402 21.4526 121.323 23.0018 121.391C24.7464 121.469 23.0486 124.291 23.8905 125.507C24.7324 126.723 25.5275 125.46 25.8081 125.086C26.0888 124.712 26.1355 122.701 26.3694 122.42C26.6033 122.14 27.7258 125.694 29.5031 124.899C31.2805 124.104 31.5611 122.14 30.6724 120.456C29.7838 118.772 30.9531 117.275 31.4676 117.649C31.9821 118.024 34.6948 119.333 34.7884 117.509C34.461 116.761 33.8637 115.726 33.1046 115.264C32.0288 114.609 29.8305 113.534 29.4564 113.627C29.0822 113.721 21.7857 115.404 21.7857 115.404V115.404Z"
                      stroke-width="2.565"
                      stroke="#d28e77"
                    />
                  </g>

                  <path
                    id="mouth-close"
                    d="M55.0517 66.8811C55.4552 66.6724 55.9223 66.3367 56.0896 66.1352C56.3442 65.8284 56.1254 65.7811 54.7474 65.8446C53.8419 65.8863 52.8332 65.9243 52.5057 65.929C51.2106 65.9477 52.2548 67.2371 53.5772 67.2521C53.9846 67.2567 54.6481 67.0898 55.0517 66.8811Z"
                    fill="#d28e77"
                    ref={(path) => (this.mouthClose = path)}
                  />

                  <path
                    id="mouth-open"
                    d="M52.3848 69.6357C51.1205 69.4544 49.4852 67.5964 49.8031 66.7025C49.8728 66.5068 49.683 66.2905 49.37 66.2086C48.5338 65.99 48.6885 65.1344 49.6728 64.5343C51.0934 63.9023 59.1289 63.0462 59.6311 63.9525C59.8663 64.3919 59.7046 64.7486 58.63 66.1605C57.9251 67.0867 56.9918 68.1041 56.5559 68.4213C55.6525 69.079 53.921 69.8482 53.477 69.7892C53.3128 69.7674 52.8214 69.6983 52.3848 69.6357Z"
                    fill="#d28e77"
                    ref={(path) => (this.mouthOpen = path)}
                  />

                  <path
                    id="eye-left"
                    d="M39.1059 50.5807C38.3221 49.8925 38.1841 49.6226 38.3201 49.0443C38.4108 48.6585 38.5887 48.2297 38.7154 48.0915C38.8422 47.9532 38.9458 47.6466 38.9458 47.41C38.9458 47.1734 39.2214 46.721 39.5582 46.4046C40.2861 45.7207 42.1378 45.609 42.6435 46.2183C43.4727 47.2174 41.9149 51.1452 40.6145 51.3343C40.2808 51.3829 39.6746 51.08 39.1059 50.5807Z"
                    fill="#d28e77"
                    ref={(path) => (this.eyeLeft = path)}
                  />
                  <path
                    id="eye-right"
                    d="M66.4286 50.688L65.8155 50.0354L66.439 48.263C66.782 47.2883 67.3943 46.1335 67.7997 45.697C68.2051 45.2604 68.7845 44.6353 69.0872 44.3079C70.5543 42.7209 71.3237 44.4687 70.5722 47.6814C70.5552 47.7541 70.0001 49.0043 70.0001 49.0043C69.3894 50.3479 69.0668 50.6602 67.8766 51.0601C67.1373 51.3084 66.9715 51.2658 66.4286 50.688Z"
                    fill="#d28e77"
                    ref={(path) => (this.eyeRight = path)}
                  />

                  <path
                    id="eye-left-close"
                    d="M36.951 49.5581C36.951 49.5581 37.7448 47.4414 41.912 46.9784C46.0792 46.5153 46.5422 47.3752 46.5422 47.3752C46.5422 47.3752 43.4333 46.9122 41.0521 47.706C38.6708 48.4997 37.7448 48.9627 37.4141 49.2935C37.0833 49.6242 36.951 49.5581 36.951 49.5581Z"
                    fill="#d28e77"
                    stroke-width="0.765"
                    ref={(path) => (this.eyeLeftClose = path)}
                  />
                  <path
                    id="eye-right-close"
                    d="M61.7131 46.2507C61.7131 46.2507 63.1314 44.4905 67.2332 45.3597C71.3349 46.2289 71.5044 47.1907 71.5044 47.1907C71.5044 47.1907 68.6983 45.7747 66.1883 45.7804C63.6782 45.7861 62.6536 45.9348 62.2357 46.145C61.8179 46.3551 61.7131 46.2507 61.7131 46.2507V46.2507Z"
                    fill="#d28e77"
                    stroke-width="0.765"
                    ref={(path) => (this.eyeRightClose = path)}
                  />
                </g>
              </svg>
            </div>
          </div>
          <div className="l-story__main--text">
            <h4>une</h4>
            <p>
              Peng Rui sees wool as the main material to create sculptures since
              2012, inspired by her own natural surroundings, she embraces the
              simplicity of the world she inhabits and finds the beauty in
              things. She always searching and learning new things, tend to fuse
              everyday life into her creative works. Good at interpreting
              characters with refreshing andminimal style to accentuate their
              key features.
            </p>
            <p>
              Through creating works of diverse level, explore the way people
              think, open the door to start possible dialogues with the public,
              and to observe, study, and explore different facade of the world.
            </p>
          </div>
        </div>
      </section>
    );
  }
}

export default withTranslate(Story);
